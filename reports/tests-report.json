{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 3,
    "pending": 0,
    "failures": 1,
    "start": "2024-04-05T21:35:17.896Z",
    "end": "2024-04-05T21:35:56.655Z",
    "duration": 38759,
    "testsRegistered": 4,
    "passPercent": 75,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "391e6207-0ee8-40e1-bf16-20e42f3f2af1",
      "title": "",
      "fullFile": "/Users/giancarlocarlin/Projects/selenium-practice/test/paramTest.js",
      "file": "/test/paramTest.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6c4d1cdf-b3e5-4838-ac94-bc8111f0aff9",
          "title": "add another todo app test",
          "fullFile": "/Users/giancarlocarlin/Projects/selenium-practice/test/paramTest.js",
          "file": "/test/paramTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfully adds another todo for Chrome, 119.0 in Linux",
              "fullTitle": "add another todo app test successfully adds another todo for Chrome, 119.0 in Linux",
              "timedOut": null,
              "duration": 3259,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "lambdaTestCapabilities.capability.browserName = name;\nlambdaTestCapabilities.capability.browserVersion = version;\nlambdaTestCapabilities.capability[\"LT:Options\"].platformName = os;\nlambdaTestCapabilities.capability[\"LT:Options\"].build = this.test.title;\n// launch the browser\ndriver = new Builder()\n  .usingServer(gridURL)\n  .withCapabilities(lambdaTestCapabilities.capability)\n  .build();\n// navigate to the url\nawait driver.get(\"https://lambdatest.github.io/sample-todo-app/\");\n// add a todo using locators and actions\nawait driver\n  .findElement({ id: \"sampletodotext\" })\n  .sendKeys(\"Learn to automate with Selenium\");\nawait driver.findElement({ id: \"addbutton\" }).click();\n// assert the todo\nlet newTodo = await driver\n  .findElement({\n    xpath: \"//li[last()]\",\n  })\n  .getText();\n// assert using chai should library\nnewTodo.should.equal(\"Learn to automate with Selenium\");\nawait driver.quit();",
              "err": {},
              "uuid": "14e31b9b-5dce-47c4-9651-d21fa36e47b2",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "successfully adds another todo for MicrosoftEdge, 120.0 in macOS Sonoma",
              "fullTitle": "add another todo app test successfully adds another todo for MicrosoftEdge, 120.0 in macOS Sonoma",
              "timedOut": null,
              "duration": 10828,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "lambdaTestCapabilities.capability.browserName = name;\nlambdaTestCapabilities.capability.browserVersion = version;\nlambdaTestCapabilities.capability[\"LT:Options\"].platformName = os;\nlambdaTestCapabilities.capability[\"LT:Options\"].build = this.test.title;\n// launch the browser\ndriver = new Builder()\n  .usingServer(gridURL)\n  .withCapabilities(lambdaTestCapabilities.capability)\n  .build();\n// navigate to the url\nawait driver.get(\"https://lambdatest.github.io/sample-todo-app/\");\n// add a todo using locators and actions\nawait driver\n  .findElement({ id: \"sampletodotext\" })\n  .sendKeys(\"Learn to automate with Selenium\");\nawait driver.findElement({ id: \"addbutton\" }).click();\n// assert the todo\nlet newTodo = await driver\n  .findElement({\n    xpath: \"//li[last()]\",\n  })\n  .getText();\n// assert using chai should library\nnewTodo.should.equal(\"Learn to automate with Selenium\");\nawait driver.quit();",
              "err": {},
              "uuid": "a0f425a6-db78-4ab3-942e-cb9f928f4aa9",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "successfully adds another todo for Internet Explorer, 8.0 in Windows 7",
              "fullTitle": "add another todo app test successfully adds another todo for Internet Explorer, 8.0 in Windows 7",
              "timedOut": null,
              "duration": 7920,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "lambdaTestCapabilities.capability.browserName = name;\nlambdaTestCapabilities.capability.browserVersion = version;\nlambdaTestCapabilities.capability[\"LT:Options\"].platformName = os;\nlambdaTestCapabilities.capability[\"LT:Options\"].build = this.test.title;\n// launch the browser\ndriver = new Builder()\n  .usingServer(gridURL)\n  .withCapabilities(lambdaTestCapabilities.capability)\n  .build();\n// navigate to the url\nawait driver.get(\"https://lambdatest.github.io/sample-todo-app/\");\n// add a todo using locators and actions\nawait driver\n  .findElement({ id: \"sampletodotext\" })\n  .sendKeys(\"Learn to automate with Selenium\");\nawait driver.findElement({ id: \"addbutton\" }).click();\n// assert the todo\nlet newTodo = await driver\n  .findElement({\n    xpath: \"//li[last()]\",\n  })\n  .getText();\n// assert using chai should library\nnewTodo.should.equal(\"Learn to automate with Selenium\");\nawait driver.quit();",
              "err": {
                "message": "AssertionError: expected '{{sampletodo.text}}' to equal 'Learn to automate with Selenium'",
                "estack": "AssertionError: expected '{{sampletodo.text}}' to equal 'Learn to automate with Selenium'\n    at Context.<anonymous> (test/paramTest.js:74:22)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": "- {{sampletodo.text}}\n+ Learn to automate with Selenium\n"
              },
              "uuid": "070e2190-9f84-45e9-80b2-6fa3875f01c8",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "successfully adds another todo for Opera, 97.0 in Windows 11",
              "fullTitle": "add another todo app test successfully adds another todo for Opera, 97.0 in Windows 11",
              "timedOut": null,
              "duration": 16369,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "lambdaTestCapabilities.capability.browserName = name;\nlambdaTestCapabilities.capability.browserVersion = version;\nlambdaTestCapabilities.capability[\"LT:Options\"].platformName = os;\nlambdaTestCapabilities.capability[\"LT:Options\"].build = this.test.title;\n// launch the browser\ndriver = new Builder()\n  .usingServer(gridURL)\n  .withCapabilities(lambdaTestCapabilities.capability)\n  .build();\n// navigate to the url\nawait driver.get(\"https://lambdatest.github.io/sample-todo-app/\");\n// add a todo using locators and actions\nawait driver\n  .findElement({ id: \"sampletodotext\" })\n  .sendKeys(\"Learn to automate with Selenium\");\nawait driver.findElement({ id: \"addbutton\" }).click();\n// assert the todo\nlet newTodo = await driver\n  .findElement({\n    xpath: \"//li[last()]\",\n  })\n  .getText();\n// assert using chai should library\nnewTodo.should.equal(\"Learn to automate with Selenium\");\nawait driver.quit();",
              "err": {},
              "uuid": "9d2d5b1e-30fb-480f-b6d3-214bd89234a4",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "14e31b9b-5dce-47c4-9651-d21fa36e47b2",
            "a0f425a6-db78-4ab3-942e-cb9f928f4aa9",
            "9d2d5b1e-30fb-480f-b6d3-214bd89234a4"
          ],
          "failures": [
            "070e2190-9f84-45e9-80b2-6fa3875f01c8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 38376,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "tests-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "reportFilename": "tests-report"
      },
      "version": "6.2.0"
    }
  }
}